# Ubuntu-based Dockerfile for better library compatibility
FROM node:20 AS base

# Install required system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    ca-certificates \
    dumb-init \
    libc6 \
    libstdc++6 \
    libgomp1 \
    espeak-ng \
    espeak-ng-data \
    && rm -rf /var/lib/apt/lists/*

# Build stage
FROM base AS builder
WORKDIR /app

# Copy package files for better caching
COPY package*.json ./
RUN npm ci --only=production && npm cache clean --force

# Copy application code and TTS files
COPY . .

# Production stage  
FROM base AS production
WORKDIR /app

# Copy built application and dependencies
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/package*.json ./
COPY --from=builder /app/index.js ./
COPY --from=builder /app/piper_total ./piper_total

# Make binaries executable and set up libraries
RUN chmod +x ./piper_total/piper_new && \
    chmod +x ./piper_total/piper/piper && \
    # Copy shared libraries to system location for better compatibility
    cp ./piper_total/piper/lib*.so* /usr/lib/ && \
    ldconfig

# Set environment variables
ENV NODE_ENV=production
ENV LD_LIBRARY_PATH=/app/piper_total/piper:/usr/lib:/usr/local/lib:$LD_LIBRARY_PATH
ENV ESPEAK_DATA_PATH=/app/piper_total/piper/espeak-ng-data

# Create directory for temporary audio files
RUN mkdir -p /app/temp && chown -R node:node /app

# Switch to non-root user
USER node

# Expose port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:5000/health || exit 1

# Start application
CMD ["dumb-init", "node", "index.js"]